 def  process ( self ,  img ): 
        if  self . flip  ==  'True' :  img  =  cv . flip ( img ,  1 ) 
        gray  =  cv . cvtColor ( img ,  cv . COLOR_BGR2GRAY ) 
        # Find the corners of each image 
        retval ,  corners  =  cv . findChessboardCorners ( 
            gray ,  self . patternSize ,  None , 
            flags = cv . CALIB_CB_ADAPTIVE_THRESH  +  cv . CALIB_CB_NORMALIZE_IMAGE  +  cv . CALIB_CB_FAST_CHECK ) 
        # Find corner subpixels 
        if  retval : 
            corners  =  cv . cornerSubPix ( 
                gray ,  corners , ( 11 ,  11 ), ( - 1 ,  - 1 ), 
                ( cv . TERM_CRITERIA_EPS  +  cv . TERM_CRITERIA_MAX_ITER ,  30 ,  0.001 )) 
            # Calculate object pose solvePnPRansac 
            retval ,  rvec ,  tvec ,  inliers  =  cv . solvePnPRansac ( 
                self . objectPoints ,  corners ,  self . cameraMatrix ,  self . distCoeffs ) 
            # output image points and jacobian matrix 
            image_Points ,  jacobian  =  cv . projectPoints ( 
                self . __axis ,  rvec ,  tvec ,  self . cameraMatrix ,  self . distCoeffs , ) 
            # draw the image 
            img  =  self . draw ( img ,  corners ,  image_Points ) 
        return  img 
